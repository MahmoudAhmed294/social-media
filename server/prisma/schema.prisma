// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  gender         String
  bio            String?
  username       String
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profilePicture Media?
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  notify         Notify[]
  followers      Follow[]  @relation("follower")
  following      Follow[]  @relation("following")
  chats          Chat[]
  Message        Message[]
}

model Chat {
  id              Int       @id @default(autoincrement())
  name            String
  users           User[]
  unreadCount     Int       @default(0)
  messages        Message[]
  lastMessage     String?
  lastMessageTime DateTime?
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  isRead    Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  media     Media[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mediaId   Int?
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  type      String
  usingFor  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId Int?
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  Notify    Notify?  @relation(fields: [notifyId], references: [id])
  notifyId  Int?
}

model Post {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mediaId   Int
  media     Media[]
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model Follow {
  id              Int      @id @default(autoincrement())
  followerUser    User     @relation("follower", fields: [followerUserId], references: [id])
  followerUserId  Int
  followingUser   User     @relation("following", fields: [followingUserId], references: [id])
  followingUserId Int
  createdAt       DateTime @default(now())
}

model Notify {
  id      Int     @id @default(autoincrement())
  url     String
  text    String
  content String
  media   Media[]
  isRead  Boolean @default(false)
  User    User    @relation(fields: [userId], references: [id])
  userId  Int
}
